source('~/Documents/KaggleTitanic/KaggleTitanic_DataCampReplication.R', echo=TRUE)
str(train)
str(test)
str(train)
source('~/Documents/KaggleTitanic/KaggleTitanic_DataCampReplication.R', echo=TRUE)
str(all_data)
source('~/Documents/KaggleTitanic/KaggleTitanic_DataCampReplication.R', echo=TRUE)
my_prediction <- predict(my_tree_five,test)
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
write.csv(my_solution, file = "my_solution.csv", row.names = FALSE)
my_solution
my_prediction <- predict(my_tree_five,test)
my_prediction
head(my_prediction)
my_prediction <- predict(my_tree_five, test, type = "class")
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
str(my_solution)
write.csv(my_solution, file = "my_solution.csv", row.names = FALSE)
# performance on Kaggle dropped.  Now I'm going to try controlling the tree more.
my_tree_five <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + family_size + Deck, data = train, method = "class",control = rpart.control(minsplit = 50, cp = 0))
fancyRpartPlot(my_tree_five)
my_prediction <- predict(my_tree_five, test, type = "class")
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
write.csv(my_solution, file = "my_solution.csv", row.names = FALSE)
x <- (1:10)
x
mean(x)
calc.accuracy <- function(mydata) {
accuracy <- mean(mydata)
return(accuracy)
}
calc.accuracy(x)
y <- (1:10)
x-y
z <- x-y
z
sum(z)
x[1] <- 10
c
x
x-y
z <- x-y
z
sum(z)
len(z)
length(z)
x[1] <- 2
z <- x-y
calc.accuracy <- function(myprediction, the_answers) {
mistakes <- myprediction-the_answerrs
accuracy <- length(mydata)-sum(mistakes)
return(accuracy)
}
calc.accuracy(z)
calc.accuracy(x,y)
calc.accuracy <- function(myprediction, the_answers) {
mistakes <- myprediction-the_answers
accuracy <- length(mydata)-sum(mistakes)
return(accuracy)
}
calc.accuracy(x,y)
calc.accuracy <- function(myprediction, the_answers) {
mistakes <- myprediction-the_answers
accuracy <- length(myprediction)-sum(mistakes)
return(accuracy)
}
calc.accuracy(x,y)
calc.accuracy <- function(myprediction, the_answers) {
mistakes <- myprediction-the_answers
accuracy <- (length(myprediction)-sum(mistakes))/length(myprediction)
return(accuracy)
}
calc.accuracy(x,y)
source('~/Documents/KaggleTitanic/KaggleTitanic_DataCampReplication.R', echo=TRUE)
my_trainprediction <- predict(my_tree_five, train, type = "class")
my_testprediction <- predict(my_tree_five, test, type = "class")
my_scoredtrain <- data.frame(Survived = train$Survived, Score = my_trainprediction)
head(my_scoredtrain)
calc.accuracy(my_scoredtrain$Survived, my_scoredtrain$Score)
str(my_scoredtrain)
calc.accuracy(my_scoredtrain$Survived, as.integer(my_scoredtrain$Score))
range(as.integer(my_scoredtrain$Score))
range(my_scoredtrain$Survived)
my_trainprediction
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
calc.accuracy(my_scoredtrain$Survived, as.numeric.factor(my_scoredtrain$Score))
# calculate accuracy rate of my_tree_four
my_trainprediction <- predict(my_tree_four, train, type = "class")
my_testprediction <- predict(my_tree_four, test, type = "class")
my_scoredtrain <- data.frame(Survived = train$Survived, Score = my_trainprediction)
calc.accuracy(my_scoredtrain$Survived, as.numeric.factor(my_scoredtrain$Score))
?vector
randomRows = function(df,n){
return(df[sample(nrow(df),n),])
}
randownRows(my_scoredtrain,10)
randomRows(my_scoredtrain,10)
randomRows(my_scoredtrain,10)
calc.bootstrap.accuracy <- function(myfile,m,n) {
# myfile should have first column with your prediction and second column with the answer key
# pull m bootstrap samples of size n
list.of.results <- vector(mode = "numeric", length = 0)
for (i in 0:(m-1){
y <- randomRows(myfile,n)
list.of.results[i] <- calc.accuracy(y[,0], y[,1])
}
bootstrap_accuracy <- mean(list.of.results)
return(bootstrap_accuracy)
}
y <- vector(mode = "numeric", length = 20L)
y
mean(y)
y[0] <- 10
y
y[1] <- 10
y
mean(y)
# Now improve the function to calculate the accuracy rate on bootstrap samples from train
calc.bootstrap.accuracy <- function(myfile,m,n){
# myfile should have first column with your prediction and second column with the answer key
# pull m bootstrap samples of size n
list.of.results <- vector(mode = "numeric", length = 0)
for (i in 1:m){
y <- randomRows(myfile,n)
list.of.results[i] <- calc.accuracy(y[,0], y[,1])
}
bootstrap_accuracy <- mean(list.of.results)
return(bootstrap_accuracy)
}
str(my_scoredtrain)
my_trainprediction <- predict(my_tree_five, train, type = "class")
my_testprediction <- predict(my_tree_five, test, type = "class")
my_scoredtrain <- data.frame(Score = as.numeric.factor(my_trainprediction), Survived = train$Survived)
str(my_scoredtrain)
calc.bootstrap.accuracy(my_scoredtrain,10,300)
calc.bootstrap.accuracy(my_scoredtrain,10,300)
my_scoredtrain <- data.frame(Score = as.numeric.factor(my_trainprediction), Survived = as.numeric(train$Survived))
y <- randomRows(myfile,n)
y <- randomRows(my_scoredtrain,n)
y <- randomRows(my_scoredtrain,10)
y
y <- randomRows(my_scoredtrain,300)
y
calc.bootstrap.accuracy <- function(myfile,m,n){
# myfile should have first column with your prediction and second column with the answer key
# pull m bootstrap samples of size n
list.of.results <- vector(mode = "numeric", length = m)
for (i in 1:m){
y <- randomRows(myfile,n)
list.of.results[i] <- calc.accuracy(y[,0], y[,1])
}
bootstrap_accuracy <- mean(list.of.results)
return(bootstrap_accuracy)
}
my_trainprediction <- predict(my_tree_five, train, type = "class")
my_testprediction <- predict(my_tree_five, test, type = "class")
my_scoredtrain <- data.frame(Score = as.numeric.factor(my_trainprediction), Survived = as.numeric(train$Survived))
calc.bootstrap.accuracy(my_scoredtrain,10,300)
y
calc.accuracy(y[,0], y[,1]
calc.accuracy(y[,0], y[,1])
str(y)
y[,0]
y[,1]
y[,2]
y[,3]
calc.bootstrap.accuracy <- function(myfile,m,n){
# myfile should have first column with your prediction and second column with the answer key
# pull m bootstrap samples of size n
list.of.results <- vector(mode = "numeric", length = m)
for (i in 1:m){
y <- randomRows(myfile,n)
list.of.results[i] <- calc.accuracy(y[,1], y[,2])
}
bootstrap_accuracy <- mean(list.of.results)
return(bootstrap_accuracy)
}
my_scoredtrain <- data.frame(Score = as.numeric.factor(my_trainprediction), Survived = as.numeric(train$Survived))
calc.bootstrap.accuracy(my_scoredtrain,10,300)
calc.bootstrap.accuracy <- function(myfile,m,n){
# myfile should have first column with your prediction and second column with the answer key
# pull m bootstrap samples of size n
list.of.results <- vector(mode = "numeric", length = m)
for (i in 1:m){
print(paste("the iteration is",i))
y <- randomRows(myfile,n)
list.of.results[i] <- calc.accuracy(y[,1], y[,2])
}
bootstrap_accuracy <- mean(list.of.results)
return(bootstrap_accuracy)
}
calc.bootstrap.accuracy(my_scoredtrain,10,300)
calc.bootstrap.accuracy <- function(myfile,m,n){
# myfile should have first column with your prediction and second column with the answer key
# pull m bootstrap samples of size n
list.of.results <- vector(mode = "numeric", length = m)
for (i in 1:m){
print(paste("the iteration is",i))
y <- randomRows(myfile,n)
list.of.results[i] <- calc.accuracy(y[,1], y[,2])
}
print(list.of.results)
bootstrap_accuracy <- mean(list.of.results)
return(bootstrap_accuracy)
}
calc.bootstrap.accuracy(my_scoredtrain,10,300)
calc.bootstrap.accuracy <- function(myfile,m,n){
# myfile should have first column with your prediction and second column with the answer key
# pull m bootstrap samples of size n
list.of.results <- vector(mode = "numeric", length = m)
for (i in 1:m){
print(paste("the iteration is",i))
y <- randomRows(myfile,n)
print(y)
list.of.results[i] <- calc.accuracy(y[,1], y[,2])
}
print(list.of.results)
bootstrap_accuracy <- mean(list.of.results)
return(bootstrap_accuracy)
}
calc.bootstrap.accuracy(my_scoredtrain,10,300)
calc.bootstrap.accuracy <- function(myfile,m,n){
# myfile should have first column with your prediction and second column with the answer key
# pull m bootstrap samples of size n
list.of.results <- vector(mode = "numeric", length = m)
for (i in 1:m){
print(paste("the iteration is",i))
y <- randomRows(myfile,n)
print(y[,1])
list.of.results[i] <- calc.accuracy(y[,1], y[,2])
}
print(list.of.results)
bootstrap_accuracy <- mean(list.of.results)
return(bootstrap_accuracy)
}
calc.bootstrap.accuracy(my_scoredtrain,10,300)
calc.bootstrap.accuracy <- function(myfile,m,n){
# myfile should have first column with your prediction and second column with the answer key
# pull m bootstrap samples of size n
list.of.results <- vector(mode = "numeric", length = m)
for (i in 1:m){
print(paste("the iteration is",i))
y <- randomRows(myfile,n)
print(y[,1])
print(y[,2])
list.of.results[i] <- calc.accuracy(y[,1], y[,2])
}
print(list.of.results)
bootstrap_accuracy <- mean(list.of.results)
return(bootstrap_accuracy)
}
calc.bootstrap.accuracy(my_scoredtrain,10,300)
calc.bootstrap.accuracy <- function(myfile,m,n){
# myfile should have first column with your prediction and second column with the answer key
# pull m bootstrap samples of size n
list.of.results <- vector(mode = "numeric", length = m)
for (i in 1:m){
print(paste("the iteration is",i))
y <- randomRows(myfile,n)
r <- y[,1]
print(r)
s <- y[,2]
print(s)
print(r-s)
list.of.results[i] <- calc.accuracy(y[,1], y[,2])
}
print(list.of.results)
bootstrap_accuracy <- mean(list.of.results)
return(bootstrap_accuracy)
}
calc.bootstrap.accuracy(my_scoredtrain,10,300)
y
r <- y[,1]
print(r)
s <- y[,2]
print(s)
print(r-s)
print(abs(r-s))
calc.accuracy <- function(myprediction, the_answers) {
mistakes <- abs(myprediction-the_answers)
accuracy <- (length(myprediction)-sum(mistakes))/length(myprediction)
return(accuracy)
}
my_trainprediction <- predict(my_tree_five, train, type = "class")
my_testprediction <- predict(my_tree_five, test, type = "class")
my_scoredtrain <- data.frame(Survived = train$Survived, Score = my_trainprediction)
calc.accuracy(my_scoredtrain$Survived, as.numeric.factor(my_scoredtrain$Score))
my_trainprediction <- predict(my_tree_four, train, type = "class")
my_testprediction <- predict(my_tree_four, test, type = "class")
my_scoredtrain <- data.frame(Survived = train$Survived, Score = my_trainprediction)
calc.accuracy(my_scoredtrain$Survived, as.numeric.factor(my_scoredtrain$Score))
calc.bootstrap.accuracy <- function(myfile,m,n){
# myfile should have first column with your prediction and second column with the answer key
# pull m bootstrap samples of size n
list.of.results <- vector(mode = "numeric", length = m)
for (i in 1:m){
print(paste("the iteration is",i))
y <- randomRows(myfile,n)
r <- y[,1]
print(r)
s <- y[,2]
print(s)
print(abs(r-s))
list.of.results[i] <- calc.accuracy(y[,1], y[,2])
}
print(list.of.results)
bootstrap_accuracy <- mean(list.of.results)
return(bootstrap_accuracy)
}
my_trainprediction <- predict(my_tree_five, train, type = "class")
my_testprediction <- predict(my_tree_five, test, type = "class")
my_scoredtrain <- data.frame(Score = as.numeric.factor(my_trainprediction), Survived = as.numeric(train$Survived))
calc.bootstrap.accuracy(my_scoredtrain,10,300)
# calculate bootstrap accuracy rate of my_tree_four
my_trainprediction <- predict(my_tree_four, train, type = "class")
my_testprediction <- predict(my_tree_four, test, type = "class")
my_scoredtrain <- data.frame(Score = as.numeric.factor(my_trainprediction), Survived = as.numeric(train$Survived))
calc.bootstrap.accuracy(my_scoredtrain,10,300)
# calculate bootstrap accuracy rate of my_forest (which should be wildly overfit...)
my_trainprediction <- predict(my_forest, train, type = "class")
my_testprediction <- predict(my_forest, test, type = "class")
my_scoredtrain <- data.frame(Score = as.numeric.factor(my_trainprediction), Survived = as.numeric(train$Survived))
calc.bootstrap.accuracy(my_scoredtrain,10,300)
source('~/Documents/KaggleTitanic/KaggleTitanic_DataCampReplication.R', echo=TRUE)
mean(c(0.9266667, 0.9433333, 0.9266667, 0.9400000, 0.9466667, 0.9366667, 0.9466667, 0.9333333, 0.9466667, 0.9400000)
)
source('~/Documents/KaggleTitanic/KaggleTitanic_DataCampReplication.R', echo=TRUE)
source('~/Documents/KaggleTitanic/KaggleTitanic_DataCampReplication.R', echo=TRUE)
source('~/Documents/KaggleTitanic/KaggleTitanic_DataCampReplication.R', echo=TRUE)
source('~/Documents/KaggleTitanic/KaggleTitanic_DataCampReplication.R', echo=TRUE)
# my_tree_six. Same as my_tree_five but changing the control parameters.
my_tree_six <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + family_size + Deck, data = train, method = "class",control = rpart.control(cp = 0, minbucket=5))
fancyRpartPlot(my_tree_five)
my_prediction <- predict(my_tree_five, test, type = "class")
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
write.csv(my_solution, file = "my_solution.csv", row.names = FALSE) # Kaggle performance = XXX
# calculate accuracy rate of my_tree_six
my_trainprediction <- predict(my_tree_six, train, type = "class")
my_testprediction <- predict(my_tree_six, test, type = "class")
my_scoredtrain <- data.frame(Survived = train$Survived, Score = my_trainprediction)
calc.accuracy(my_scoredtrain$Survived, as.numeric.factor(my_scoredtrain$Score)) # accuracy on train = XXX
# calculate bootstrap accuracy rate of my_tree_six
my_trainprediction <- predict(my_tree_six, train, type = "class")
my_testprediction <- predict(my_tree_six, test, type = "class")
my_scoredtrain <- data.frame(Score = as.numeric.factor(my_trainprediction), Survived = as.numeric(train$Survived))
calc.bootstrap.accuracy(my_scoredtrain,10,300) # bootstrap accuracy on train = XXX
?fancyRpartPlot
# my_tree_six. Same as my_tree_five but changing the control parameters.
my_tree_six <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + family_size + Deck, data = train, method = "class",control = rpart.control(cp = 0, minbucket=5))
fancyRpartPlot(my_tree_six)
my_prediction <- predict(my_tree_six, test, type = "class")
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
write.csv(my_solution, file = "my_solution.csv", row.names = FALSE) # Kaggle performance = 0.79426
# calculate accuracy rate of my_tree_six
my_trainprediction <- predict(my_tree_six, train, type = "class")
my_testprediction <- predict(my_tree_six, test, type = "class")
my_scoredtrain <- data.frame(Survived = train$Survived, Score = my_trainprediction)
calc.accuracy(my_scoredtrain$Survived, as.numeric.factor(my_scoredtrain$Score)) # accuracy on train = 0.8810325
# calculate bootstrap accuracy rate of my_tree_six
my_trainprediction <- predict(my_tree_six, train, type = "class")
my_testprediction <- predict(my_tree_six, test, type = "class")
my_scoredtrain <- data.frame(Score = as.numeric.factor(my_trainprediction), Survived = as.numeric(train$Survived))
calc.bootstrap.accuracy(my_scoredtrain,10,300) # bootstrap accuracy on train = 0.8806667
# my_tree_seven. Same as my_tree_six but changing the control parameters to be more chunky.
my_tree_seven <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + family_size + Deck, data = train, method = "class",control = rpart.control(cp = 0, minbucket=50))
fancyRpartPlot(my_tree_seven)
my_prediction <- predict(my_tree_seven, test, type = "class")
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
write.csv(my_solution, file = "my_solution.csv", row.names = FALSE) # Kaggle performance = XXX
# calculate accuracy rate of my_tree_seven
my_trainprediction <- predict(my_tree_seven, train, type = "class")
my_testprediction <- predict(my_tree_seven, test, type = "class")
my_scoredtrain <- data.frame(Survived = train$Survived, Score = my_trainprediction)
calc.accuracy(my_scoredtrain$Survived, as.numeric.factor(my_scoredtrain$Score)) # accuracy on train = XXX
# calculate bootstrap accuracy rate of my_tree_seven
my_trainprediction <- predict(my_tree_seven, train, type = "class")
my_testprediction <- predict(my_tree_seven, test, type = "class")
my_scoredtrain <- data.frame(Score = as.numeric.factor(my_trainprediction), Survived = as.numeric(train$Survived))
calc.bootstrap.accuracy(my_scoredtrain,10,300) # bootstrap accuracy on train = XXX
# my_tree_seven. Same as my_tree_six but changing the control parameters to be more chunky.
my_tree_seven <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + family_size + Deck, data = train, method = "class",control = rpart.control(cp = 0, minbucket=30))
fancyRpartPlot(my_tree_seven)
my_prediction <- predict(my_tree_seven, test, type = "class")
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
write.csv(my_solution, file = "my_solution.csv", row.names = FALSE) # Kaggle performance = XXX
# calculate accuracy rate of my_tree_seven
my_trainprediction <- predict(my_tree_seven, train, type = "class")
my_testprediction <- predict(my_tree_seven, test, type = "class")
my_scoredtrain <- data.frame(Survived = train$Survived, Score = my_trainprediction)
calc.accuracy(my_scoredtrain$Survived, as.numeric.factor(my_scoredtrain$Score)) # accuracy on train = XXX
# calculate bootstrap accuracy rate of my_tree_seven
my_trainprediction <- predict(my_tree_seven, train, type = "class")
my_testprediction <- predict(my_tree_seven, test, type = "class")
my_scoredtrain <- data.frame(Score = as.numeric.factor(my_trainprediction), Survived = as.numeric(train$Survived))
calc.bootstrap.accuracy(my_scoredtrain,10,300) # bootstrap accuracy on train = XXX
# my_tree_eight: my_tree_seven with Title added back in.
my_tree_eight <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + family_size + Deck, data = train, method = "class",control = rpart.control(cp = 0, minbucket=30))
fancyRpartPlot(my_tree_eight)
my_prediction <- predict(my_tree_eight, test, type = "class")
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
write.csv(my_solution, file = "my_solution.csv", row.names = FALSE) # Kaggle performance = XXX
# calculate accuracy rate of my_tree_eight
my_trainprediction <- predict(my_tree_eight, train, type = "class")
my_testprediction <- predict(my_tree_eight, test, type = "class")
my_scoredtrain <- data.frame(Survived = train$Survived, Score = my_trainprediction)
calc.accuracy(my_scoredtrain$Survived, as.numeric.factor(my_scoredtrain$Score)) # accuracy on train = XXX
# calculate bootstrap accuracy rate of my_tree_eight
my_trainprediction <- predict(my_tree_eight, train, type = "class")
my_testprediction <- predict(my_tree_eight, test, type = "class")
my_scoredtrain <- data.frame(Score = as.numeric.factor(my_trainprediction), Survived = as.numeric(train$Survived))
calc.bootstrap.accuracy(my_scoredtrain,10,300) # bootstrap accuracy on train = XXX
# my_tree_eight: my_tree_seven with Title added back in.
my_tree_eight <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + family_size + Deck, data = train, method = "class",control = rpart.control(cp = 0, minbucket=20))
fancyRpartPlot(my_tree_eight)
my_prediction <- predict(my_tree_eight, test, type = "class")
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
write.csv(my_solution, file = "my_solution.csv", row.names = FALSE) # Kaggle performance = XXX
# calculate accuracy rate of my_tree_eight
my_trainprediction <- predict(my_tree_eight, train, type = "class")
my_testprediction <- predict(my_tree_eight, test, type = "class")
my_scoredtrain <- data.frame(Survived = train$Survived, Score = my_trainprediction)
calc.accuracy(my_scoredtrain$Survived, as.numeric.factor(my_scoredtrain$Score)) # accuracy on train = XXX
# calculate bootstrap accuracy rate of my_tree_eight
my_trainprediction <- predict(my_tree_eight, train, type = "class")
my_testprediction <- predict(my_tree_eight, test, type = "class")
my_scoredtrain <- data.frame(Score = as.numeric.factor(my_trainprediction), Survived = as.numeric(train$Survived))
calc.bootstrap.accuracy(my_scoredtrain,10,300) # bootstrap accuracy on train = XXX
# my_tree_eight: my_tree_seven with Title added back in.
my_tree_eight <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + family_size + Deck, data = train, method = "class",control = rpart.control(cp = 0, minbucket=10))
fancyRpartPlot(my_tree_eight)
my_prediction <- predict(my_tree_eight, test, type = "class")
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
write.csv(my_solution, file = "my_solution.csv", row.names = FALSE) # Kaggle performance = XXX
# calculate accuracy rate of my_tree_eight
my_trainprediction <- predict(my_tree_eight, train, type = "class")
my_testprediction <- predict(my_tree_eight, test, type = "class")
my_scoredtrain <- data.frame(Survived = train$Survived, Score = my_trainprediction)
calc.accuracy(my_scoredtrain$Survived, as.numeric.factor(my_scoredtrain$Score)) # accuracy on train = XXX
# calculate bootstrap accuracy rate of my_tree_eight
my_trainprediction <- predict(my_tree_eight, train, type = "class")
my_testprediction <- predict(my_tree_eight, test, type = "class")
my_scoredtrain <- data.frame(Score = as.numeric.factor(my_trainprediction), Survived = as.numeric(train$Survived))
calc.bootstrap.accuracy(my_scoredtrain,10,300) # bootstrap accuracy on train = XXX
# my_tree_eight: my_tree_seven with Title added back in.
my_tree_eight <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + family_size + Deck + Title, data = train, method = "class",control = rpart.control(cp = 0, minbucket=20))
fancyRpartPlot(my_tree_eight)
my_prediction <- predict(my_tree_eight, test, type = "class")
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
write.csv(my_solution, file = "my_solution.csv", row.names = FALSE) # Kaggle performance = XXX
# calculate accuracy rate of my_tree_eight
my_trainprediction <- predict(my_tree_eight, train, type = "class")
my_testprediction <- predict(my_tree_eight, test, type = "class")
my_scoredtrain <- data.frame(Survived = train$Survived, Score = my_trainprediction)
calc.accuracy(my_scoredtrain$Survived, as.numeric.factor(my_scoredtrain$Score)) # accuracy on train = XXX
# calculate bootstrap accuracy rate of my_tree_eight
my_trainprediction <- predict(my_tree_eight, train, type = "class")
my_testprediction <- predict(my_tree_eight, test, type = "class")
my_scoredtrain <- data.frame(Score = as.numeric.factor(my_trainprediction), Survived = as.numeric(train$Survived))
calc.bootstrap.accuracy(my_scoredtrain,10,300) # bootstrap accuracy on train = XXX
# rerunning DT4 to see if that was the one that got .80383 in Kaggle perf...
my_tree_four <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + family_size, data = train_two, method = "class")
fancyRpartPlot(my_tree_four)
my_prediction <- predict(my_tree_four, test, type = "class")
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
write.csv(my_solution, file = "my_solution.csv", row.names = FALSE) # Kaggle performance = XXX
# calculate accuracy rate of my_tree_four
my_trainprediction <- predict(my_tree_four, train, type = "class")
my_testprediction <- predict(my_tree_four, test, type = "class")
my_scoredtrain <- data.frame(Survived = train$Survived, Score = my_trainprediction)
calc.accuracy(my_scoredtrain$Survived, as.numeric.factor(my_scoredtrain$Score)) # accuracy on train = XXX
# calculate bootstrap accuracy rate of my_tree_four
my_trainprediction <- predict(my_tree_four, train, type = "class")
my_testprediction <- predict(my_tree_four, test, type = "class")
my_scoredtrain <- data.frame(Score = as.numeric.factor(my_trainprediction), Survived = as.numeric(train$Survived))
calc.bootstrap.accuracy(my_scoredtrain,10,300) # bootstrap accuracy on train = XXX
head(train)
my_logit_one <- glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + family_size + Deck + Title, data=train, family = "binomial")
source('~/Documents/KaggleTitanic/KaggleTitanic_DataCampReplication.R', echo=TRUE)
summary(my_logit_one)
my_trainprediction <- predict(my_logit_one, train, type = "response")
my_testprediction <- predict(my_logit_one, test, type = "response")
my_scoredtrain <- data.frame(Survived = train$Survived, Score = my_trainprediction)
calc.accuracy(my_scoredtrain$Survived, as.numeric.factor(my_scoredtrain$Score)) # accuracy on train = XXX
head(my_scoredtrain, 30L)
my_scoredtrain$Score <- round(my_scoredtrain$Score)
head(my_scoredtrain, 30L)
calc.accuracy(my_scoredtrain$Survived, as.numeric.factor(my_scoredtrain$Score)) # accuracy on train = XXX
str(my_scoredtrain)
calc.accuracy(my_scoredtrain$Survived, as.integer(my_scoredtrain$Score)) # accuracy on train = XXX
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_testprediction)
write.csv(my_solution, file = "my_solution.csv", row.names = FALSE) # Kaggle performance = XXX
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = as.integer(round(my_testprediction)))
head(my_solution, 30L)
write.csv(my_solution, file = "my_solution.csv", row.names = FALSE) # Kaggle performance = XXX
install.packages("Amelia")
library('Amelia')
missmap(train, main = "Missing values vs observed")
